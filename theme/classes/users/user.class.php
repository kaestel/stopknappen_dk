<?php
/**
* @package janitor.users
* This file contains simple user extensions
* Meant to allow local user additions/overrides
*/

/**
* User customization class
*/
class User extends UserCore {


	/**
	* Init, set varnames, validation rules
	*/
	function __construct() {

		parent::__construct(get_class());

		$this->addToModel("it_nato_bor", array(
			"type" => "checkbox",
			"label" => "I have a pain inside and I take it out on other people",
			"hint_message" => "Are you in this kind of pain?",
			"error_message" => "Please state if you are in this kind of pain."
		));


	}


	// create new user
	// email is minimum info to create user at this point (signup to maillist)
	// will also add subscription for maillist if it is sent along with signup
	function newUser($action) {

		global $page;
		$page->addLog("user->newUser: initiated");

		// only attempt user creation if signups are allowed for this site
		if(defined("SITE_SIGNUP") && SITE_SIGNUP) {

			// Get posted values to make them available for models
			$this->getPostedEntities();

			$it_nato_bor = $this->getProperty("it_nato_bor", "value");
			if($it_nato_bor) {

				$email = $this->getProperty("email", "value");

				$page->addLog("user->newUser: signup identified as BOT: $email");

				// send notification email to admin
				mailer()->send(array(
					"subject" => SITE_URL . " - BOT SIGNUP DETECTED: " . $email, 
					"message" => "no user was created",
					"tracking" => false,
					"template" => "system"
				));

				return ["BOT_SIGNUP" => true];
			}


			// PASSED bot honeyput

			$terms = $this->getProperty("terms", "value");
			$email = $this->getProperty("email", "value");


			// if haven't accepted terms, return error
			if(!$terms) {
				$page->addLog("user->newUser: missing terms agreement");
				return array("status" => "MISSING_TERMS");
			}


			// if user already exists, return error
			if($this->userExists(array("email" => $email))) {
				$page->addLog("user->newUser: user exists ($email)");
				return array("status" => "USER_EXISTS");
			}


			// does values validate - minimum is email
			if(count($action) == 1 && $this->validateList(array("email")) && $email) {

				$query = new Query();
				$nickname = $this->getProperty("nickname", "value");
				$firstname = $this->getProperty("firstname", "value");
				$lastname = $this->getProperty("lastname", "value");


				// get entities for current value
				$entities = $this->getModel();
				$names = array();
				$values = array();

				foreach($entities as $name => $entity) {
					if($entity["value"] !== false && preg_match("/^(nickname|firstname|lastname|language)$/", $name)) {
						$names[] = $name;
						$values[] = $name."='".$entity["value"]."'";
					}
				}

				// if no nickname were posted, use email
				if(!$nickname) {
					if($firstname && $lastname) {
						$nickname = $firstname . " " . $lastname;
					}
					else if($firstname) {
						$nickname = $firstname;
					}
					else if($lastname) {
						$nickname = $lastname;
					}
					else {
						$nickname = $email;
					}

					$values[] = "nickname='".$nickname."'";
					$quantity = $this->getProperty("quantity", "value");
					$item_id = $this->getProperty("item_id", "value");
				}

				// add member user group
				$values[] = "user_group_id=2";


				$sql = "INSERT INTO ".$this->db." SET " . implode(",", $values);
				// print $sql."<br>\n";
				if($query->sql($sql)) {

					$user_id = $query->lastInsertId();


					// Gererate verification code
					$verification_code = randomKey(8);

					// add email to user_usernames
					$sql = "INSERT INTO $this->db_usernames SET username = '$email', verified = 0, verification_code = '$verification_code', type = 'email', user_id = $user_id";
					// print $sql."<br>\n";
					if($query->sql($sql)) {


						$mobile = $this->getProperty("mobile", "value");
						if($mobile) {
							$sql = "INSERT INTO $this->db_usernames SET username = '$mobile', verified = 1, verification_code = '$verification_code', type = 'mobile', user_id = $user_id";
			//				print $sql;
							$query->sql($sql);
						}


						// user can send password on signup
						$raw_password = $this->getProperty("password", "value");
						$mail_password = "******** (password is encrypted)";

						// if raw password was not sent - set temp password and include it in activation email
						if(!$raw_password || $raw_password == "Password") {
							// add temp password
							$raw_password = randomKey(8);
							$mail_password = $raw_password." (autogenerated password)";
						}

						// encrypt password
						$password = password_hash($raw_password, PASSWORD_DEFAULT);
						$sql = "INSERT INTO ".$this->db_passwords." SET user_id = $user_id, password = '$password'";
						// password added successfully
						if($query->sql($sql)) {

							// store signup email for receipt page
							session()->value("signup_email", $email);



							// VERIFICATION EMAIL

							// add log
							$page->addLog("user->newUser: created: " . $email . ", user_id:$user_id");

							// success
							// send activation email
							if($verification_code) {

								// send verification email to user
								mailer()->send(array(
									"values" => array(
										"NICKNAME" => $nickname, 
										"EMAIL" => $email, 
										"VERIFICATION" => $verification_code,
										"PASSWORD" => $mail_password
									), 
									"track_clicks" => false,
									"recipients" => $email, 
									"template" => "signup"
								));

								// send notification email to admin
								mailer()->send(array(
									"subject" => SITE_URL . " - New User: " . $email, 
									"message" => "Check out the new user: " . SITE_URL . "/janitor/admin/user/edit/" . $user_id, 
									"tracking" => false,
									"template" => "system"
								));
							}
							// error
							else {
								// send error email notification
								mailer()->send(array(
									"recipients" => $email, 
									"template" => "signup_error"
								));

								// send notification email to admin
								mailer()->send(array(
									"subject" => "New User created ERROR: " . $email, 
									"message" => "Check out the new user: " . SITE_URL . "/janitor/admin/user/edit/" . $user_id, 
									"tracking" => false
									// "template" => "system"
								));
							}


							// Update session values (to allow user to complete signup)
							session()->value("user_id", $user_id);
							session()->value("user_nickname", $nickname);

							// but also reset user group
							// - in case another user was already logged in before signup started
							session()->value("user_group_id", 1);



							// TERMS

							// Add terms agreement
							$this->acceptedTerms();



							// MAILLIST

							// maillist subscription sent as string?
							$maillist = getPost("maillist");
							$maillist_name = getPost("maillist_name");
							if($maillist && $maillist_name) {

								// check if maillist exists
								$maillists = $page->maillists();
								$maillist_match = arrayKeyValue($maillists, "name", $maillist_name);
								if($maillist_match !== false) {
									$maillist_id = $maillists[$maillist_match]["id"];
									$_POST["maillist_id"] = $maillist_id;

									// add maillist for current user
									$this->addMaillist(array("addMaillist"));
								}
								
								// ignore subscription if maillist does not exist

							}

							// itemtype post save handler?
							// TODO: Consider if failed postSave should have consequences
							if(method_exists($this, "saved")) {
								$this->saved($user_id);
							}


							message()->resetMessages();

							// return enough information to the frontend
							return array("user_id" => $user_id, "nickname" => $nickname, "email" => $email);

						}
					}

				}
			}
		}

		$page->addLog("user->newUser failed: (missing info)");
		return false;
	}

}

?>